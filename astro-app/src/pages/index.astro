---
import { actions, isInputError } from 'astro:actions';
import BaseLayout from '../layouts/BaseLayout.astro';
import Greeting from '../components/Greeting';
const pageTitle = "Home Page";
const variant = Astro.locals.abVariant;

// const result = Astro.getActionResult(actions.submitForm);
// const inputErrors = isInputError(result?.error) ? result.error.fields : {};
---
<BaseLayout pageTitle={pageTitle}>
  {variant === 'A' && <h2>My awesome blog subtitle A</h2>}
  {variant === 'B' && <h2>My awesome blog subtitle B</h2>}
  <Greeting client:load messages={["Hej", "Hallo", "Hola", "Habari"]} />

  <!-- <form action={actions.submitForm} method="POST">
    <div class="form-group">
      <label for="name">–í–∞—à–µ –∏–º—è:</label>
      <input type="text" id="name" name="name" required />
      {inputErrors.name && <p class="error-text">{inputErrors.name}</p>}
    </div>
    <div class="form-group">
      <label for="email">–í–∞—à Email:</label>
      <input type="email" id="email" name="email" required />
      {inputErrors.email && <p class="error-text">{inputErrors.email}</p>}
    </div>
    <div class="form-group">
      <label for="message">–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
      <textarea id="message" name="message" rows="4" required></textarea>
      {inputErrors.message && <p class="error-text">{inputErrors.message}</p>}
    </div>
    <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
  </form>

  {result?.data && <div class="success">{result.data.message}</div>}
      {result?.error && !isInputError(result.error) && <div class="error">{result.error.message}</div>} -->
</BaseLayout>

<!-- <style>
  .error-text {
    color: red;
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }
  .success, .error {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 4px;
  }
  .success {
    background-color: #d1fae5;
    color: #065f46;
  }
  .error {
    background-color: #fee2e2;
    color: #991b1b;
  }
</style> -->

<!-- <script>
  import { actions, isInputError } from 'astro:actions';

  const form = document.querySelector<HTMLFormElement>('form')!;
  const mainEl = document.querySelector('main');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    document.querySelectorAll('.error-text, .success, .error').forEach(el => el.remove());

    // üöÄ –í–æ—Ç –∏ –≤—Å—è –º–∞–≥–∏—è! –í—ã–∑—ã–≤–∞–µ–º Action –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    const result = await actions.submitForm(formData);

    if (result.error) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞...
      if (isInputError(result.error)) {
        // ...–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ –ø–æ–¥ –ø–æ–ª—è–º–∏
        for (const [field, errors] of Object.entries(result.error.fields)) {
          const input = form.querySelector(`[name="${field}"]`)!;
          const errorEl = document.createElement('p');
          errorEl.classList.add('error-text');
          errorEl.textContent = errors.join(', ');
          input.parentElement!.append(errorEl);
        }
      } else {
        // ...–∏–Ω–∞—á–µ —ç—Ç–æ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        const errorEl = document.createElement('div');
        errorEl.classList.add('error');
        errorEl.textContent = result.error.message;
        mainEl!.append(errorEl);
      }
      return;
    }

    // –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ...
    const successEl = document.createElement('div');
    successEl.classList.add('success');
    successEl.textContent = result.data.message;
    mainEl!.append(successEl);
    form.reset();
  });
</script> -->