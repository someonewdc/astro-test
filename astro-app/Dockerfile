# =================================================================
# ЭТАП 1: "Сборщик" (Builder)
# На этом этапе мы устанавливаем все зависимости (включая dev)
# и собираем наше приложение в готовый для запуска вид.
# =================================================================
FROM node:20-alpine AS builder

# Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды будут выполняться из /app.
WORKDIR /app

# Копируем файлы с описанием зависимостей.
# Мы копируем их отдельно от всего остального кода.
# Это ключевой момент для кэширования Docker! Если эти файлы не менялись,
# Docker не будет заново устанавливать зависимости при каждой сборке.
COPY package.json package-lock.json* ./

# Устанавливаем зависимости. Используем 'npm ci' вместо 'npm install'.
# 'npm ci' работает быстрее и устанавливает версии строго из package-lock.json,
# что гарантирует идентичность сборок.
RUN npm ci

# Теперь копируем весь остальной код нашего приложения.
COPY . .

# Запускаем команду сборки Astro.
# Эта команда создаст оптимизированную версию приложения в папке /dist.
RUN npm run build


# =================================================================
# ЭТАП 2: "Продакшен" (Production)
# Этот этап начнется с чистого листа. Мы возьмем только самое
# необходимое из этапа "Сборщик" и создадим маленький,
# безопасный и быстрый образ для запуска.
# =================================================================
FROM node:20-alpine

WORKDIR /app

# Снова копируем package.json, чтобы установить ТОЛЬКО продакшен-зависимости.
COPY package.json package-lock.json* ./

# Устанавливаем только те зависимости, которые нужны для работы приложения,
# пропуская все devDependencies (например, сам 'astro', 'prettier', 'eslint').
# Это значительно уменьшает размер итогового образа.
RUN npm ci --omit=dev

# САМЫЙ ВАЖНЫЙ ШАГ: Копируем собранное приложение из этапа "builder".
# Команда '--from=builder' позволяет нам обращаться к файловой системе
# другого этапа сборки. Мы берем папку /app/dist из "сборщика"
# и кладем ее в папку /app/dist в нашем финальном образе.
COPY --from=builder /app/dist ./dist

# Указываем, что наше приложение будет работать на порту 4321.
# Эта команда носит информационный характер и не открывает порт наружу.
# Реальное открытие порта делается в docker-compose.yml.
EXPOSE 4321

# Устанавливаем переменную окружения, чтобы Node.js и фреймворки
# работали в оптимизированном продакшен-режиме.
ENV NODE_ENV=production

# Добавляем переменную окружения HOST, чтобы указать Astro
# слушать на всех сетевых интерфейсах, а не только на localhost.
ENV HOST=0.0.0.0

# Команда, которая будет выполняться при старте контейнера.
# Мы запускаем серверный скрипт, который Astro создал для нас при сборке.
CMD ["node", "./dist/server/entry.mjs"]